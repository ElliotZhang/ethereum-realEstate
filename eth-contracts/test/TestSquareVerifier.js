// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
// Test verification with incorrect proof

var Verifier = artifacts.require('Verifier');

contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];

    describe('Test verification with correct proof', function () {
        beforeEach(async function () { 
            this.contract = await Verifier.new({from: account_one});
        })

        it('should be proved', async function () { 
            let result = await this.contract.verifyTx(
                ["0x11ceea6848d6f4bb17fbe01e2f37a7f50aa5ea4da8aa6e4e364c3202dbb35deb", "0x04991e94bc0ae3718a464aecd3c351cadb9c779d8acf9601ac87245b7a5cec76"],
                [["0x18b754e9665ee861740aa1ccb4def4ed4eb945d0f26be1dced2656004ea59111", "0x099a674ea974d7421b96a617635ac38939775ce47916487edaf5d384ddd401bf"], ["0x22450d6b21830786c87e94131fbaaf9f6eaa93e6d526a827b42b706bee7654ff", "0x022b35cca41f73cee44819184e9c0054e1553f3a31310e53581d90e526c93073"]],
                ["0x07405e6618cd88e94e44ceeade27f44d9dc362cf8f4de882b0d8905906d3daea", "0x1c8e8f412dfab3243f232fa9da9b1705bf99b05952819160d69c64ede0794fab"],
                ["0x0000000000000000000000000000000000000000000000000000000000000004", "0x0000000000000000000000000000000000000000000000000000000000000001"]);
            assert.equal(result.logs[0].event, "Verified", "Should verify");
        })
    });

    describe('Test verification with incorrect proof', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: account_one});
        })

        it('should not be proved', async function () {
            let result = await this.contract.verifyTx(
                ["0x11ceea6848d6f4bb17fbe01e2f37a7f50aa5ea4da8aa6e4e364c3202dbb35deb", "0x04991e94bc0ae3718a464aecd3c351cadb9c779d8acf9601ac87245b7a5cec76"],
                [["0x18b754e9665ee861740aa1ccb4def4ed4eb945d0f26be1dced2656004ea59111", "0x099a674ea974d7421b96a617635ac38939775ce47916487edaf5d384ddd401bf"], ["0x22450d6b21830786c87e94131fbaaf9f6eaa93e6d526a827b42b706bee7654ff", "0x022b35cca41f73cee44819184e9c0054e1553f3a31310e53581d90e526c93073"]],
                ["0x07405e6618cd88e94e44ceeade27f44d9dc362cf8f4de882b0d8905906d3daea", "0x1c8e8f412dfab3243f232fa9da9b1705bf99b05952819160d69c64ede0794fab"],
                ["0x0000000000000000000000000000000000000000000000000000000000000004", "0x0000000000000000000000000000000000000000000000000000000000000002"]);

            assert.equal(result.logs.length, 0, "should not verify");
        })

    });
})
